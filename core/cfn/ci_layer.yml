Description: >-
    This template deploys an AWS CodeBuild project that
    builds the docker container used for YP builds. It depends on the
    CI Network template.

Parameters:
  NetworkStackName:
    Description: >-
        An environment name that is prefixed to resource names
    Type: String
  ContainerRegistryUri:
    Description: >-
        The URI where the build machine image lives.
    Type: String
  BuildSpecRepository:
    Description: >-
        The URI to the repository, i.e. https://github.com/aws/meta-aws
    Type: String
  BuildSpecLocation:
    Description: >-
        The buildspec subdirectory and filename.  By default this is
        the root directory with name 'buildspec.yml'. If in a
        subdirectory, it can be configured like
        'subdirectory/buildspec.yml'.
    Type: String
    Default: buildspec.yml
Resources:

  BuildSStateCacheFilesystem:
    Type: AWS::EFS::FileSystem
    Properties: 
      BackupPolicy: 
        Status: ENABLED
      Encrypted: False
      FileSystemTags: 
        - Key: Name
          Value: !Join
            - ''
            - - !Ref AWS::StackName
              - "/"
              - sstate-cache
      LifecyclePolicies: 
        - TransitionToIA: AFTER_30_DAYS
      PerformanceMode: generalPurpose
      ThroughputMode: bursting

  BuildDownloadFilesystem:
    Type: AWS::EFS::FileSystem
    Properties: 
      BackupPolicy: 
        Status: ENABLED
      Encrypted: False
      FileSystemTags: 
        - Key: Name
          Value: !Join
            - ''
            - - !Ref AWS::StackName
              - "/"
              - download
      LifecyclePolicies: 
        - TransitionToIA: AFTER_30_DAYS
      PerformanceMode: generalPurpose
      ThroughputMode: bursting
    
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: no_artifacts
      BadgeEnabled: true
      Description: >-
          The build process for creating an image and propagating to
          ECR for automated build processes.
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_2XLARGE
        Image: !Join
          - ''
          - - !Ref ContainerRegistryUri
            - ':Latest'
        PrivilegedMode: true
      FileSystemLocations:
        - Identifier: !Join
            - ''
            - - !Ref AWS::StackName
              - '_sstate'
          Location: !Join
            - ''
            - - !Ref BuildSStateCacheFilesystem
              - '.efs.'
              - !Ref AWS::Region
              - '.amazonaws.com:/'
          MountPoint: /sstate-cache
          Type: EFS
        - Identifier: !Join
            - ''
            - - !Ref AWS::StackName
              - '_downloads'
          Location: !Join
            - ''
            - - !Ref BuildDownloadFilesystem
              - '.efs.'
              - !Ref AWS::Region
              - '.amazonaws.com:/'
          MountPoint: /downloads
          Type: EFS
      Name: !Ref AWS::StackName
      ServiceRole: !Ref CodeBuildRole
      Source:
        BuildSpec: !Ref BuildSpecLocation
        Location: !Ref BuildSpecRepository
        Type: GITHUB
        SourceIdentifier: meta_aws_demos
      SourceVersion: master
      VpcConfig:
        VpcId:
          Fn::ImportValue:
            !Sub "${NetworkStackName}-VPC"
        Subnets:
          - Fn::ImportValue:
              !Sub "${NetworkStackName}-PrivateSubnet1"
          - Fn::ImportValue:
              !Sub "${NetworkStackName}-PrivateSubnet2"
        SecurityGroupIds:
          - Fn::ImportValue:
              !Sub "${NetworkStackName}-NoIngressSecurityGroup"

  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            Service: [codebuild.amazonaws.com]
        Version: '2012-10-17'
      Path: /
      Policies:
        - PolicyName: CodeBuildAccessBase
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                - 'logs:*'
                - 'ec2:CreateNetworkInterface'
                - 'ec2:DescribeNetworkInterfaces'
                - 'ec2:DeleteNetworkInterface'
                - 'ec2:DescribeSubnets'
                - 'ec2:DescribeSecurityGroups'
                - 'ec2:DescribeDhcpOptions'
                - 'ec2:DescribeVpcs'
                - 'ec2:CreateNetworkInterfacePermission'
                Effect: Allow
                Resource: '*'
        - PolicyName: CodeBuildAccessNetwork
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                - 'ec2:CreateNetworkInterfacePermission'
                Condition:
                  StringEquals:
                    'ec2:Subnet':
                      - !Join
                        - ''
                        - - 'arn:aws:ec2:'
                          - !Ref 'AWS::Region'
                          - ':'
                          - !Ref 'AWS::AccountId'
                          - ':network-interface:subnet/'
                          - Fn::ImportValue: !Sub "${NetworkStackName}-PrivateSubnet1"
                      - !Join
                        - ''
                        - - 'arn:aws:ec2:'
                          - !Ref 'AWS::Region'
                          - ':'
                          - !Ref 'AWS::AccountId'
                          - ':network-interface:subnet/'
                          - Fn::ImportValue: !Sub "${NetworkStackName}-PrivateSubnet2"
                    'ec2:AuthorizedService': 'codebuild.amazonaws.com'
                Effect: Allow
                Resource: !Join
                  - ''
                  - - 'arn:aws:ec2:'
                    - !Ref 'AWS::Region'
                    - ':'
                    - !Ref 'AWS::AccountId'
                    - ':network-interface/*'
        - PolicyName: LogsAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                - 'logs:CreateLogGroup'
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
                Effect: Allow
                Resource:
                - !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - !Ref 'AWS::Region'
                    - ':'
                    - !Ref 'AWS::AccountId'
                    - ':log-group:/aws/codebuild/'
                    - !Join
                      - ''
                      - - !Ref AWS::StackName
                        - "_YPBuildImage"
                - !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - !Ref 'AWS::Region'
                    - ':'
                    - !Ref 'AWS::AccountId'
                    - ':log-group:/aws/codebuild/'
                    - !Join
                      - ''
                      - - !Ref AWS::StackName
                        - "_YPBuildImage"
                    - ':*'
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                - 's3:PutObject'
                - 's3:GetObject'
                - 's3:GetObjectVersion'
                - 's3:GetBucketAcl'
                - 's3:GetBucketLocation'
                Effect: Allow
                Resource: "arn:aws:s3:::codepipeline-us-east-1-*"
